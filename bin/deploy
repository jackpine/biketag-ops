#!/usr/bin/env bash

function usage {
  cat <<EOS
Usage: ./deploy <connection-string> <environment>
 e.g.: ./deploy core@api.biketag-staging.jackpine.me staging
EOS
}

function provision {
  ENVIRONMENT=$1

  if [ -z $ENVIRONMENT ]
  then
    usage
    exit 1
  fi

  echo "Ensure latest ops pacakge is installed"
  (cd ~/biketag-ops && git pull)

  docker ps -a | grep biketag-db > /dev/null
  DB_ALREADY_DEPLOYED=$?
  if [ $DB_ALREADY_DEPLOYED -eq 0 ]
  then
    echo "Database previously deployed."
    docker start biketag-db
  else
    echo "Deploying new database container."
    docker run --name biketag-db -d mdillon/postgis
  fi

  echo "Pulling latest api container."
  docker pull jackpine/biketag-api > /dev/null

  echo "Removing any pre-existing api container."
  docker stop biketag-api > /dev/null
  docker rm biketag-api > /dev/null

  echo "Starting new api container."
  docker run --name biketag-api --link biketag-db:biketag-db -p 443:443 -p 80:80 -d jackpine/biketag-api

  echo "Copying config."
  docker exec -i biketag-api bash -c "cat - > ~app/biketag-api/.env" < ~/biketag-ops/secrets/biketag-$ENVIRONMENT-api.env

  echo "Restarting container."
  docker stop biketag-api
  docker start biketag-api

  if [ $ENVIRONMENT == "production" ]
  then
    echo "Installing SSL certificates"
    ~/biketag-ops/bin/install-ssl
  fi
}

if [ "$#" == 2 ]
then
  HOST=$1
  ENVIRONMENT=$2

  echo "Remote deploying ${ENVIRONMENT} to ${HOST}."
  ssh $1 "$(typeset -f); provision $ENVIRONMENT"
else
  usage
  exit 1
fi
